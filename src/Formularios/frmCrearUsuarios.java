
package Formularios;

import com.toedter.calendar.JCalendar;
import conection.Consultas;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import com.toedter.calendar.JDateChooser;
import java.util.Calendar;
import conection.Consultas;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class frmCrearUsuarios extends javax.swing.JDialog {

    /**
     * Creates new form frmCrearUsuarios
     
     */
    
     

    
    public frmCrearUsuarios(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
   JCalendar jCalendar = new JCalendar();

// Establecer el formato de fecha deseado (opcional)

 // Reemplaza "tuPanel" con el nombre de tu panel o contenedor


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        NewUsuario = new javax.swing.JButton();
        DeleteUsuario = new javax.swing.JButton();
        UpdateUsuario = new javax.swing.JButton();
        SelectUsuario = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaImpresiones = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TxtNumUsuario = new javax.swing.JTextField();
        TxtNomUsuario = new javax.swing.JTextField();
        TxtEmail = new javax.swing.JTextField();
        TxtContrasenia = new javax.swing.JTextField();
        ComPermisos = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        TxtFecha = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        NewUsuario.setText("Nuevo Usuario");
        NewUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewUsuarioActionPerformed(evt);
            }
        });

        DeleteUsuario.setText("Eliminar Usuario");
        DeleteUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteUsuarioActionPerformed(evt);
            }
        });

        UpdateUsuario.setText("Actualizar Usuario");
        UpdateUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateUsuarioActionPerformed(evt);
            }
        });

        SelectUsuario.setText("Consultar Usuarios");
        SelectUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectUsuarioActionPerformed(evt);
            }
        });

        TablaImpresiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "id_users", "nombre_user", "emal", "contrasena", "fecha", "id_rol", "nombre_rol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaImpresiones);

        jLabel1.setText("Número de usuario");

        jLabel2.setText("Nombre de Usuario");

        jLabel3.setText("Email");

        jLabel4.setText("Contraseña");

        jLabel6.setText("Permisos");

        ComPermisos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "AgenteInmobiliario", "Soporte", " " }));
        ComPermisos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComPermisosActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Fecha");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NewUsuario)
                .addGap(54, 54, 54)
                .addComponent(DeleteUsuario)
                .addGap(50, 50, 50)
                .addComponent(UpdateUsuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SelectUsuario)
                .addGap(137, 137, 137))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(TxtNumUsuario)
                    .addComponent(TxtNomUsuario)
                    .addComponent(TxtEmail)
                    .addComponent(TxtContrasenia)
                    .addComponent(ComPermisos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtFecha))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewUsuario)
                    .addComponent(DeleteUsuario)
                    .addComponent(UpdateUsuario)
                    .addComponent(SelectUsuario))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TxtNumUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(TxtNomUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TxtContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(TxtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(ComPermisos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewUsuarioActionPerformed
   String idUsuario = TxtNumUsuario.getText().trim();
String nombreUsuario = TxtNomUsuario.getText().trim();
String email = TxtEmail.getText().trim();
String contrasena = TxtContrasenia.getText().trim();

// Obtener la fecha del campo de texto TxtFecha
String fecha = TxtFecha.getText().trim();

// Obtener el valor del permiso seleccionado
String seleccionPermiso = (String) ComPermisos.getSelectedItem(); 
int id_permiso = 0;

switch (seleccionPermiso) {
    case "Administrador":
        id_permiso = 1;
        break;
    case "AgenteInmobiliario":
        id_permiso = 2;
        break;
    case "Soporte":
        id_permiso = 3;
        break;
    default:
        // Manejar un caso no válido
        break;
}

// Verificar que todos los campos no estén vacíos
if (!idUsuario.isEmpty() && !nombreUsuario.isEmpty() && !email.isEmpty() && !contrasena.isEmpty() && !fecha.isEmpty()) {
    try {
        // Verificar que la fecha esté en el formato correcto
        new SimpleDateFormat("yyyy-MM-dd").parse(fecha);

        Consultas consultas = new Consultas();
        consultas.CrearUsuario(Integer.parseInt(idUsuario), nombreUsuario, email, contrasena, fecha, id_permiso);

        // Limpiar los campos de texto después de crear el usuario
        TxtNumUsuario.setText("");
        TxtNomUsuario.setText("");
        TxtEmail.setText("");
        TxtContrasenia.setText("");
        TxtFecha.setText("");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID de usuario y permisos deben ser números enteros.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (ParseException e) {
        JOptionPane.showMessageDialog(this, "La fecha debe estar en el formato yyyy-MM-dd.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
    }
} else {
    JOptionPane.showMessageDialog(this, "Por favor, llene todos los campos.", "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
}


// TODO add your handling code here:
    }//GEN-LAST:event_NewUsuarioActionPerformed

    private void DeleteUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteUsuarioActionPerformed
       String idUsuario = TxtNumUsuario.getText().trim();
        
        // Verificar si el campo de ID no está vacío
        if (!idUsuario.isEmpty()) {
            try {
                // Convertir el idCiudad a entero
                int id = Integer.parseInt(idUsuario);
                
                // Llamar al método borrarCiudad con el ID proporcionado
                Consultas consultas = new Consultas();
                consultas.borrarUsuario(id);
                
                // Limpiar el campo de ID después de borrar la ciudad
                TxtNumUsuario.setText("");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID del usuario debe ser un número entero.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID del usuario que desea borrar.", "Campo Vacío", JOptionPane.WARNING_MESSAGE);
        } // TODO add your handling code here:
    }//GEN-LAST:event_DeleteUsuarioActionPerformed

    private void UpdateUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateUsuarioActionPerformed
   String idUsuario = TxtNumUsuario.getText().trim();
        String nombreUsuario = TxtNomUsuario.getText().trim();
        String email = TxtEmail.getText().trim();
        String contrasena = TxtContrasenia.getText().trim();

        // Obtener la fecha del jCalendar
        String fechaTexto = new SimpleDateFormat("yyyy-MM-dd").format(jCalendar.getDate());
        int id_permiso = 0;
        Date fecha = null;

        String seleccionPermiso = (String) ComPermisos.getSelectedItem(); 

        switch (seleccionPermiso) {
            case "Administrador":
                id_permiso = 1;
                break;
            case "AgenteInmobiliario":
                id_permiso = 2;
                break;
            case "Soporte":
                id_permiso = 3;
                break;
            default:
                // Manejar un caso no válido
                break;
        }

        if (!fechaTexto.isEmpty()) {
            try {
                SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
                fecha = formatoFecha.parse(fechaTexto);
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Ingrese la fecha en el formato yyyy-MM-dd.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese una fecha.", "Fecha Vacía", JOptionPane.WARNING_MESSAGE);
        }

        if (!idUsuario.isEmpty() && !nombreUsuario.isEmpty() && !email.isEmpty() && !contrasena.isEmpty() && fecha != null) {
            try {
                Consultas consultas = new Consultas();
                consultas.actualizarUsuario(Integer.parseInt(idUsuario), nombreUsuario, email, contrasena, fecha, id_permiso);

                TxtNumUsuario.setText("");
                TxtNomUsuario.setText("");
                TxtEmail.setText("");
                TxtContrasenia.setText("");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID de usuario y permisos deben ser números enteros.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, llene todos los campos y asegúrese de ingresar una fecha válida.", "Campos Vacíos o Fecha Inválida", JOptionPane.WARNING_MESSAGE);
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmCrearUsuarios dialog = new frmCrearUsuarios(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
 // TODO add your handling code here:
    }//GEN-LAST:event_UpdateUsuarioActionPerformed

    private void SelectUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectUsuarioActionPerformed
      Consultas consultas = new Consultas();
    ResultSet rs = consultas.consultarUsuario();

    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID Usuario");
    modelo.addColumn("Nombre Usuario");
    modelo.addColumn("Email");
    modelo.addColumn("Contraseña");
    modelo.addColumn("Fecha");
    modelo.addColumn("ID Rol");
    modelo.addColumn("Nombre Rol");

    // Verificar si se obtuvieron resultados
    if (rs != null) {
        try {
            // Limpiar el modelo antes de agregar nuevos datos
            modelo.setRowCount(0);

            // Iterar sobre los resultados del ResultSet y agregarlos al modelo
            while (rs.next()) {
                int idUsuario = rs.getInt("id_users");
                String nombreUsuario = rs.getString("nombre_user");
                String email = rs.getString("email");
                String contrasena = rs.getString("contrasena");
                String fecha = rs.getString("fecha");
                int idRol = rs.getInt("id_rol");
                String nombreRol = rs.getString("nombre_rol"); // Agregamos el nombre del rol directamente desde la consulta

                modelo.addRow(new Object[]{idUsuario, nombreUsuario, email, contrasena, fecha, idRol, nombreRol});
            }

            // Establecer el modelo en la tabla
            TablaImpresiones.setModel(modelo);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al procesar los resultados de la consulta: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
       JOptionPane.showMessageDialog(this, "No se encontraron resultados.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }
 // TODO add your handling code here:
    }//GEN-LAST:event_SelectUsuarioActionPerformed

    private void ComPermisosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComPermisosActionPerformed
          String seleccion = (String) ComPermisos.getSelectedItem(); 

// Variable para almacenar el ID del permiso seleccionado
int id_permiso = 0; // Valor por defecto

// Asignar el valor correspondiente según la opción seleccionada
switch (seleccion) {
    case "Administrador":
        id_permiso = 1;
        break;
    case "AgenteInmobiliario":
        id_permiso = 2;
        break;
    case "Soporte":
        id_permiso = 3;
        break;
    default:
        // Manejar un caso no válido
        break;
}

 // TODO add your handling code here:
    }//GEN-LAST:event_ComPermisosActionPerformed

    /**
     * @param args the command line arguments
     */
   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComPermisos;
    private javax.swing.JButton DeleteUsuario;
    private javax.swing.JButton NewUsuario;
    private javax.swing.JButton SelectUsuario;
    private javax.swing.JTable TablaImpresiones;
    private javax.swing.JTextField TxtContrasenia;
    private javax.swing.JTextField TxtEmail;
    private javax.swing.JTextField TxtFecha;
    private javax.swing.JTextField TxtNomUsuario;
    private javax.swing.JTextField TxtNumUsuario;
    private javax.swing.JButton UpdateUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
