/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Formularios;

import conection.Consultas;
import conection.Metodos;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author luill
 */
public class frmZona extends javax.swing.JDialog {

    /**
     * Creates new form frmZona
     */
    public frmZona(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        NewRegistro = new javax.swing.JButton();
        DeleteRegistro = new javax.swing.JButton();
        UpdateRegistro = new javax.swing.JButton();
        SelectDatos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        TxtZona = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TxtNomZona = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TxtNumCiudad = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaImpresiones = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        NewRegistro.setText("Nuevo Registro");
        NewRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewRegistroActionPerformed(evt);
            }
        });

        DeleteRegistro.setText("Eliminar Registro");
        DeleteRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRegistroActionPerformed(evt);
            }
        });

        UpdateRegistro.setText("Actualizar Registro");
        UpdateRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateRegistroActionPerformed(evt);
            }
        });

        SelectDatos.setText("Consultar Datos");
        SelectDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectDatosActionPerformed(evt);
            }
        });

        jLabel1.setText("Número de zona");

        jLabel2.setText("Nombre de la Zona");

        jLabel3.setText("Número de ciudad");

        TablaImpresiones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id_zona", "nombre_zona", "id_ciudad", "nombre_ciudad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaImpresiones);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NewRegistro)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(39, 39, 39))
                    .addComponent(TxtZona, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TxtNumCiudad, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(TxtNomZona))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(DeleteRegistro)
                        .addGap(47, 47, 47)
                        .addComponent(UpdateRegistro)
                        .addGap(37, 37, 37)
                        .addComponent(SelectDatos))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewRegistro)
                    .addComponent(DeleteRegistro)
                    .addComponent(UpdateRegistro)
                    .addComponent(SelectDatos))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TxtZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2)
                        .addGap(26, 26, 26)
                        .addComponent(TxtNomZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(TxtNumCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(76, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewRegistroActionPerformed
     String idZona = TxtZona.getText().trim();
String nombreZona = TxtNomZona.getText().trim();
String idCiudad = TxtNumCiudad.getText().trim();

// Verificar si ambos campos no están vacíos
if (!idZona.isEmpty() && !nombreZona.isEmpty()) {
    try {
        // Convertir el idCiudad a entero
        int id = Integer.parseInt(idZona); // <-- Aquí debería ser idZona en lugar de idCiudad
        
        // Llamar al método insertarZona con los datos proporcionados
        Consultas consultas = new Consultas();
        consultas.insertarZona(nombreZona, id, Integer.parseInt(idCiudad)); // <-- Se asume que idCiudad es el ID de la ciudad
        
        // Limpiar los campos de texto después de insertar la zona
        TxtZona.setText("");
        TxtNomZona.setText("");
        TxtNumCiudad.setText("");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El ID de la zona debe ser un número entero.", "Error", JOptionPane.ERROR_MESSAGE);
    }
} else {
    JOptionPane.showMessageDialog(this, "Por favor, ingrese tanto el ID como el nombre de la zona.", "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
}
 // TODO add your handling code here:
    }//GEN-LAST:event_NewRegistroActionPerformed

    private void DeleteRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRegistroActionPerformed
          String idZona = TxtZona.getText().trim();
    
    // Verificar si el campo de ID no está vacío
    if (!idZona.isEmpty()) {
        try {
            // Convertir el idCiudad a entero
            int id = Integer.parseInt(idZona);
            
            // Llamar al método borrarCiudad con el ID proporcionado
            Consultas consultas = new Consultas();
            consultas.borrarCiudad(id);
            
            // Limpiar el campo de ID después de borrar la ciudad
            TxtNumCiudad.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID de la zona debe ser un número entero.", "Error", JOptionPane.ERROR_MESSAGE);
        }     catch (Metodos.ForeignKeyConstraintException ex) {
                  Logger.getLogger(frmZona.class.getName()).log(Level.SEVERE, null, ex);
              } catch (SQLException ex) {
                  Logger.getLogger(frmZona.class.getName()).log(Level.SEVERE, null, ex);
              }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID de la zona que desea borrar.", "Campo Vacío", JOptionPane.WARNING_MESSAGE);
    }  // TODO add your handling code here:
    }//GEN-LAST:event_DeleteRegistroActionPerformed

    private void UpdateRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateRegistroActionPerformed
        String idZona = TxtZona.getText().trim();
    String nombreZona = TxtNomZona.getText().trim();
    String idCiudad = TxtNumCiudad.getText().trim();
    String nuevoNombreZona = TxtNomZona.getText().trim();
    String nuevaCiudad = TxtNumCiudad.getText().trim();
    
    // Verificar si ambos campos no están vacíos
    if (!idZona.isEmpty() && !nuevoNombreZona.isEmpty()) {
        try {
            // Convertir el idZona y idCiudad a enteros
            int idZonaInt = Integer.parseInt(idZona);
            int idCiudadInt = Integer.parseInt(idCiudad);
            
            // Llamar al método actualizarZona con los datos proporcionados
            Consultas consultas = new Consultas();
            consultas.actualizarZona(idZonaInt, nuevoNombreZona, idCiudadInt);
            
            // Limpiar los campos de texto después de actualizar la zona
            TxtZona.setText("");
            TxtNomZona.setText("");
            TxtNumCiudad.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID de la zona o ciudad debe ser un número entero.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese tanto el ID como el nuevo nombre de la zona.", "Campos Vacíos", JOptionPane.WARNING_MESSAGE);
    } // TODO add your handling code here:
    }//GEN-LAST:event_UpdateRegistroActionPerformed

    private void SelectDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectDatosActionPerformed
      Consultas consultas = new Consultas();
    ResultSet rs = consultas.consultarZona(); // Llamada al método consultarZona

    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID Zona");
    modelo.addColumn("Nombre Zona");
    modelo.addColumn("ID Ciudad");
    modelo.addColumn("Nombre Ciudad");

    // Verificar si se obtuvieron resultados
    if (rs != null) {
        try {
            // Limpiar el modelo antes de agregar nuevos datos
            modelo.setRowCount(0);

            // Iterar sobre los resultados del ResultSet y agregarlos al modelo
            while (rs.next()) {
                int idZona = rs.getInt("id_zona");
                String nombreZona = rs.getString("nombre_zona");
                int idCiudad = rs.getInt("id_ciudad");
                String nombreCiudad = rs.getString("nombre_ciudad");

                modelo.addRow(new Object[]{idZona, nombreZona, idCiudad, nombreCiudad});
            }

            // Establecer el modelo en la tabla
            TablaImpresiones.setModel(modelo);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al procesar los resultados de la consulta: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No se encontraron resultados.", "Información", JOptionPane.INFORMATION_MESSAGE);
    }

    }//GEN-LAST:event_SelectDatosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmZona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmZona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmZona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmZona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmZona dialog = new frmZona(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteRegistro;
    private javax.swing.JButton NewRegistro;
    private javax.swing.JButton SelectDatos;
    private javax.swing.JTable TablaImpresiones;
    private javax.swing.JTextField TxtNomZona;
    private javax.swing.JTextField TxtNumCiudad;
    private javax.swing.JTextField TxtZona;
    private javax.swing.JButton UpdateRegistro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
